// [자바스크립트 알고리즘 문제풀이]
// 멘토링

// 현수네 반 선생님은 반 학생들의 수학점수를 향상시키기 위해 멘토링 시스템을 만들려고 합니 다. 멘토링은 멘토(도와주는 학생)와 멘티(도움을 받는 학생)가 한 짝이 되어 멘토가 멘티의 수학공부를 도와주는 것입니다.
// 선생님은 M번의 수학테스트 등수를 가지고 멘토와 멘티를 정합니다.
// 만약 A학생이 멘토이고, B학생이 멘티가 되는 짝이 되었다면, A학생은 M번의 수학테스트에서 모두 B학생보다 등수가 앞서야 합니다.
// M번의 수학성적이 주어지면 멘토와 멘티가 되는 짝을 만들 수 있는 경우가 총 몇 가지 인지 출력하는 프로그램을 작성하세요.
// ▣ 입력설명
// 첫 번째 줄에 반 학생 수 N(1<=N<=20)과 M(1<=M<=10)이 주어진다.
// 두 번째 줄부터 M개의 줄에 걸쳐 수학테스트 결과가 학생번호로 주어진다. 학생번호가 제일 앞에서부터 1등, 2등, ...N등 순으로 표현된다.
// 만약 한 줄에 N=4이고, 테스트 결과가 3 4 1 2로 입력되었다면 3번 학생이 1등, 4번 학생이 2등, 1번 학생이 3등, 2번 학생이 4등을 의미합니다.
// ▣ 출력설명
// 첫 번째 줄에 짝을 만들 수 있는 총 경우를 출력합니다.
// ▣ 입력예제 1
// 43
// 3412 4321 3142
// ▣ 출력예제 1
// 3
// (3, 1), (3, 2), (4, 2)와 같이 3가지 경우의 (멘토, 멘티) 짝을 만들 수 있다.

/**
 * 완전탐색 블루투포스의 정석문제... 어렵다
 * 문제가 헷갈릴 수 있는데 n은 학생의 수 ex) n=5면 학생은 1번부터 5번까지의 5명으로 이뤄져있다
 * m은 수학테스트 횟수 ex) m=4면 총 4번의 수학테스트 횟수이며 파라미터로 넘어오는 값이 총 4행이라는 뜻
 */

function solution(numbers) {
  //answer는 답, temp는 테스트용으로 확인할 배열
  let answer = 0,
    temp = [];
  let m = numbers.length; //3
  let n = numbers[0].length;

  // 1~4까지 1,1 1,2 1,3 1,4, 2,1 2,2 ,,,,,, 4,4 까지 총 경우의 수 4x4=16번을 i,j로 반복을 하며 (멘토, 멘티)가 되는 경우 각 멘토와 멘티의 등수를 체크
  for (let i = 1; i <= n; i++) {
    for (let j = 1; j <= n; j++) {
      let cnt = 0;
      //m번의 수학테스트에 해당하는 반복문이며 이중배열의 x좌표를 뜻함
      for (let k = 0; k < m; k++) {
        let pi = (pj = 0);
        //이중배열의 y좌표를 뜻하며 n명의 학생수를 탐색하려면 n보다 작게해서 이중배열을 탐색한다 그리고 여기서 s는 학생들의 자리 앉은 순서(인덱스)를 뜻하며 그게 곧 등수가 됨(작을 수록 등수가 높은거임 0등=1등)
        for (let s = 0; s < n; s++) {
          //여기서 [k][s]에서 s의 숫자가 작을 수록 등수가 높다 ex)[3][0]의 경우 3번째 수학테스트에서 0등(1등) 을 한애를 뜻한다
          //즉 각 수학테스트의 등수마다 i와 j를 찾은 뒤 i의 등수는 pi, j의 등수는 pj로 삽입
          if (numbers[k][s] === i) {
            pi = s;
          }
          if (numbers[k][s] === j) {
            pj = s;
          }
        }
        //pi가 pj보다 등수가 높을때를 의미 (숫자(인덱스)가 작을 수록 등수가 높다는 뜻임)
        if (pi < pj) {
          cnt++;
        }
      }
      if (cnt === m) {
        //어떤 멘토 멘티가 담겼는지 테스트용 temp
        temp.push([i, j]);
        answer++;
      }
    }
  }
  console.log(temp);
  return answer;
}
solution([
  [3, 4, 1, 2],
  [4, 3, 2, 1],
  [3, 1, 4, 2],
]);
